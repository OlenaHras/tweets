{"version":3,"file":"static/js/931.a4de24b1.chunk.js","mappings":"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","sources":["redux/selectors.js","components/TweetsItem/TweetsItem.styled.js","components/TweetsItem/TweetsItem.js","components/ListOfTweets/ListOfTwwets.styled.js","components/ListOfTweets/ListOfTweets.js","pages/TweetsPage/TweetsPage.styled.js","pages/TweetsPage/TweetsPage.js"],"sourcesContent":["export const getUsers = state => state.users;\n","import styled from '@emotion/styled';\n\nexport const Card = styled.div`\n  position: relative;\n  width: 380px;\n  height: 460px;\n  background: linear-gradient(\n    114.99deg,\n    #471ca9 -0.99%,\n    #5736a3 54.28%,\n    #4b2a99 78.99%\n  );\n  box-shadow: -2.5777px 6.87386px 20.6216px rgba(0, 0, 0, 0.23);\n  border-radius: 20px;\n`;\n\nexport const Logo = styled.img`\n  margin: 20px;\n`;\n\nexport const BackgroundImg = styled.img`\n  position: relative;\n  top: -40px;\n  padding: 0 36px;\n`;\n\nexport const Line = styled.div`\n  position: relative;\n  top: -23px;\n  height: 8px;\n  width: 380px;\n  left: 0px;\n  background: #ebd8ff;\n  box-shadow: 0px 3.43693px 3.43693px rgba(0, 0, 0, 0.06),\n    inset 0px -1.71846px 3.43693px #ae7be3, inset 0px 3;\n`;\nexport const Ellipse = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  position: relative;\n  top: -70px;\n  margin: 0 auto;\n  width: 80px;\n  height: 80px;\n  border-radius: 50px;\n  background: #ebd8ff;\n  box-shadow: 0px 4.39163px 4.39163px rgba(0, 0, 0, 0.06),\n    inset 0px -2.19582px 4.39163px #ae7be3,\n    inset 0px 4.39163px 3.29372px #fbf8ff;\n`;\nexport const Avatar = styled.img`\n  width: 62px;\n  height: 62px;\n  border-radius: 50px;\n`;\n\nexport const Info = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  top: -41px;\n  position: relative;\n`;\nexport const InfoTitle = styled.div`\n  font-size: 20px;\n  line-height: 24px;\n  color: #ebd8ff;\n  text-transform: uppercase;\n`;\n\nexport const Button = styled.button`\n  font-family: inherit;\n  font-size: 18px;\n  line-height: 22px;\n  text-transform: uppercase;\n  color: #373737;\n  width: 196px;\n  height: 50px;\n  margin-top: 26px;\n  padding: 0;\n  background: #ebd8ff;\n  box-shadow: 0px 3.43693px 3.43693px rgba(0, 0, 0, 0.25);\n  border-radius: 10.3108px;\n  border: none;\n  cursor: pointer;\n  &:hover {\n    background: #766a90;\n    color: #ebd8ff;\n  }\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { getUsers } from '../../redux/selectors';\nimport { addFollows, removeFollowing } from '../../redux/usersSlice';\n\nimport {\n  Card,\n  BackgroundImg,\n  Button,\n  Line,\n  Logo,\n  Ellipse,\n  Avatar,\n  Info,\n  InfoTitle,\n} from './TweetsItem.styled';\nimport logo from '../../assets/images/Logo.png';\nimport backgroundImg from '../../assets/images/picture.png';\n\nconst TweetsItem = ({ user, img }) => {\n  const dispatch = useDispatch();\n  const { followedUsers } = useSelector(getUsers);\n\n  const isFollowed = followedUsers.find(follower => follower.id === user.id);\n  const handleButtonClick = () => {\n    if (isFollowed) {\n      dispatch(removeFollowing(user.id));\n      return;\n    }\n\n    dispatch(addFollows(user));\n  };\n\n  const countFollowers = isFollowed ? user.followers + 1 : user.followers;\n  return (\n    <Card>\n      <>\n        <Logo src={logo} alt=\"logo\" />\n        <BackgroundImg src={backgroundImg} alt=\"backgroundImg\" />\n        <Line></Line>\n        <Ellipse>\n          <Avatar src={img} alt=\"avatar\" />\n        </Ellipse>\n      </>\n      <Info>\n        <InfoTitle style={{ marginBottom: 16 }}>{user.tweets} tweets</InfoTitle>\n        <InfoTitle> {countFollowers.toLocaleString()} Followers</InfoTitle>\n        <Button\n          style={{ backgroundColor: isFollowed && '#5CD3A8' }}\n          onClick={handleButtonClick}\n        >\n          {isFollowed ? 'Following' : 'Follow'}\n        </Button>\n      </Info>\n    </Card>\n  );\n};\nexport default TweetsItem;\n","import styled from '@emotion/styled';\n\nexport const Container = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  justify-items: center;\n  justify-content: center;\n  gap: 100px;\n  margin-bottom: 50px;\n`;\n\nexport const LoadMoreBtn = styled.button`\n  position: absolute;\n  font-size: 18px;\n  line-height: 22px;\n  text-transform: uppercase;\n  color: #373737;\n  width: 196px;\n  height: 50px;\n  left: 50%;\n  margin-left: -98px;\n  padding: 0;\n  background: #ebd8ff;\n  box-shadow: 0px 3.43693px 3.43693px rgba(0, 0, 0, 0.25);\n  border-radius: 10.3108px;\n  border: none;\n  cursor: pointer;\n  &:hover {\n    background: #766a90;\n    color: #ebd8ff;\n  }\n`;\n\nexport const NoMoreUsersMessage = styled.h3`\n  color: #766a90;\n  text-align: center;\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { getUsers } from '../../redux/selectors';\nimport TweetsItem from '../TweetsItem/TweetsItem';\nimport Spinner from '../Spinner/Spinner';\nimport {\n  Container,\n  LoadMoreBtn,\n  NoMoreUsersMessage,\n} from './ListOfTwwets.styled';\nimport { addUsers, clearUsers } from '../../redux/usersSlice';\naxios.defaults.baseURL = 'https://6455f99b5f9a4f236137da5c.mockapi.io/api/v1';\n\nconst ListOfTweets = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(false);\n  const [page, setPage] = useState(1);\n  const dispatch = useDispatch();\n  const { users } = useSelector(getUsers);\n  useEffect(() => {\n    dispatch(clearUsers());\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    setError(false);\n    setIsLoading(true);\n\n    fetchData(page);\n    setIsLoading(false);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [page]);\n\n  const fetchData = async () => {\n    try {\n      setIsLoading(true);\n      const response = await axios.get(`/users`, {\n        params: {\n          limit: 3,\n          page,\n        },\n      });\n      dispatch(addUsers(response.data));\n    } catch (error) {\n      setError('Error while loading data. Try again later.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const handleLoadMoreBtn = () => {\n    setPage(prevState => prevState + 1);\n  };\n  return (\n    <>\n      {page === 1 && isLoading && <Spinner />}\n      {users.length > 0 && (\n        <>\n          <Container>\n            {users.map(user => {\n              return (\n                <TweetsItem\n                  user={user}\n                  key={user.id}\n                  img={`https://i.pravatar.cc/300${user.id}`}\n                />\n              );\n            })}\n          </Container>\n          {users.length % 3 === 0 ? (\n            <LoadMoreBtn onClick={handleLoadMoreBtn}>\n              {isLoading ? 'Loading...' : 'Load More'}\n            </LoadMoreBtn>\n          ) : (\n            <NoMoreUsersMessage>There are no more users</NoMoreUsersMessage>\n          )}\n        </>\n      )}\n      {error && <h2>{error}</h2>}\n    </>\n  );\n};\nexport default ListOfTweets;\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  margin: 50px;\n  padding-bottom: 100px;\n`;\n","import { Link } from 'react-router-dom';\nimport ListOfTweets from '../../components/ListOfTweets/ListOfTweets';\nimport { MdOutlineArrowBackIosNew } from 'react-icons/md';\nimport { Container } from './TweetsPage.styled';\nconst TweetPage = () => {\n  return (\n    <Container>\n      <Link\n        style={{\n          display: 'flex',\n          alignItems: 'center',\n          fontWeight: 'bold',\n          fontSize: '24px',\n          marginTop: '30px',\n        }}\n        to=\"/\"\n      >\n        <MdOutlineArrowBackIosNew /> Back\n      </Link>\n      <ListOfTweets />\n    </Container>\n  );\n};\n\nexport default TweetPage;\n"],"names":["getUsers","state","users","Card","styled","_templateObject","_taggedTemplateLiteral","Logo","_templateObject2","BackgroundImg","_templateObject3","Line","_templateObject4","Ellipse","_templateObject5","Avatar","_templateObject6","Info","_templateObject7","InfoTitle","_templateObject8","Button","_templateObject9","_ref","user","img","dispatch","useDispatch","isFollowed","useSelector","followedUsers","find","follower","id","countFollowers","followers","_jsxs","children","_Fragment","_jsx","src","logo","alt","backgroundImg","style","marginBottom","tweets","toLocaleString","backgroundColor","onClick","removeFollowing","addFollows","Container","LoadMoreBtn","NoMoreUsersMessage","axios","_useState","useState","_useState2","_slicedToArray","isLoading","setIsLoading","_useState3","_useState4","error","setError","_useState5","_useState6","page","setPage","useEffect","clearUsers","fetchData","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","wrap","_context","prev","next","params","limit","sent","addUsers","data","t0","finish","stop","apply","arguments","Spinner","length","map","TweetsItem","concat","prevState","Link","display","alignItems","fontWeight","fontSize","marginTop","to","MdOutlineArrowBackIosNew","ListOfTweets"],"sourceRoot":""}